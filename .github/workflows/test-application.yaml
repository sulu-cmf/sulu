name: Test application

on:
    pull_request:
    push:
        branches:
            - master
            - release/**

jobs:
    download-language:
        name: Download languages
        runs-on: ubuntu-18.04
        steps:
            - name: Checkout project
              uses: actions/checkout@v1
            - name: Get Composer Cache Directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - name: Cache dependencies
              uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: composer-cache
            - name: Install dependencies
              run: composer update
            - name: Download language
              run: bin/console sulu:admin:download-language nl

    php-cs-fixer:
        name: Run php-cs-fixer
        runs-on: ubuntu-18.04
        steps:
            - name: Checkout project
              uses: actions/checkout@v1
            - name: Create downloads directory
              run: mkdir downloads
            - name: Get downloads path
              id: php-cs-fixer-dir
              run: echo "::set-output name=dir::downloads"
            - name: Get php-cs-fixer path
              id: php-cs-fixer-path
              run: echo "::set-output name=path::${{ steps.php-cs-fixer-dir.outputs.dir }}/php-cs-fixer.phar"
            - name: Cache php-cs-fixer
              id: php-cs-fixer-cache
              uses: actions/cache@v1
              with:
                  path: ${{ steps.php-cs-fixer-dir.outputs.dir }}
                  key: php-cs-fixer
            - name: Download php-cs-fixer
              if: steps.php-cs-fixer-cache.outputs.cache-hit != 'true'
              run: curl "https://cs.symfony.com/download/php-cs-fixer-v2.phar" --output ${{ steps.php-cs-fixer-path.outputs.path }} && chmod +x ${{ steps.php-cs-fixer-path.outputs.path }}
            - name: Run php-cs-fixer
              run: ./${{ steps.php-cs-fixer-path.outputs.path }} fix --dry-run --diff

    test:
        name: "Run tests with php ${{ matrix.php-version }} (${{ matrix.phpcr-transport }})"
        runs-on: ubuntu-latest

        env:
            APP_ENV: test
            APP_SECRET: a448d1dfcaa563fce56c2fd9981f662b
            MAILER_URL: null://localhost
            SULU_ADMIN_EMAIL:

        strategy:
            fail-fast: false
            matrix:
                include:
                    - php-version: '7.2'
                      database: postgres
                      phpcr-transport: jackrabbit
                      composer-flags: '--prefer-lowest --prefer-dist --no-interaction'
                      php-extensions: 'ctype, iconv, mysql, gd'
                      tools: 'composer:v1'
                      phpstan: false
                      lint-container: false
                      env:
                          SYMFONY_DEPRECATIONS_HELPER: disabled
                          PHPCR_TRANSPORT: jackrabbit
                          DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/sulu_test?serverVersion=12.5
                          DATABASE_CHARSET: UTF8
                          DATABASE_COLLATE:

                    - php-version: '7.4'
                      database: mysql
                      phpcr-transport: doctrinedbal
                      composer-flags: '--prefer-dist --no-interaction'
                      php-extensions: 'ctype, iconv, mysql, imagick'
                      tools: 'composer:v2'
                      phpstan: true
                      lint-container: true
                      env:
                          SYMFONY_DEPRECATIONS_HELPER: weak
                          PHPCR_TRANSPORT: doctrinedbal
                          DATABASE_URL: mysql://root:root@127.0.0.1:3306/sulu_test?serverVersion=5.7
                          DATABASE_CHARSET: utf8mb4
                          DATABASE_COLLATE: utf8mb4_unicode_ci

        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ROOT_PASSWORD: root
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

            postgres:
                image: postgres:12.5
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

            jackrabbit:
                image: sulu/jackrabbit:2.18
                env:
                    DATABASE_HOST: mysql
                    DATABASE_PORT: 3306
                    DATABASE_NAME: su_sulu_jackrabbit
                    DATABASE_USER: root
                    DATABASE_PASS: root
                    LOG_LEVEL: WARN
                ports:
                    - 8080:8080

        steps:
            - name: Checkout project
              uses: actions/checkout@v2

            - name: Install and configure PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  extensions: ${{ matrix.php-extensions }}
                  tools: ${{ matrix.tools }}
                  coverage: none

            - name: Get composer cache directory
              id: composer-cache-dir
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache dependencies
              uses: actions/cache@v2
              id: composer-cache
              with:
                  path: ${{ steps.composer-cache-dir.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-composer-

            - name: Require jackrabbit dependencies
              if: ${{ matrix.phpcr-transport == 'jackrabbit' }}
              run: |
                  composer remove jackalope/jackalope-doctrine-dbal --dev --no-interaction --no-update
                  composer require jackalope/jackalope-jackrabbit:^1.4  --no-interaction --no-update

            - name: Install dependencies
              run: |
                composer validate --strict
                composer update ${{ matrix.composer-flags }}

            - name: PHPStan
              if: ${{ matrix.phpstan }}
              run: |
                  bin/adminconsole cache:clear --env dev
                  bin/websiteconsole cache:clear --env dev
                  vendor/bin/phpstan analyze
              env: ${{ matrix.env }}

            - name: Lint container
              if: ${{ matrix.lint-container }}
              run: |
                  bin/adminconsole lint:container --env dev
                  bin/websiteconsole lint:container --env dev
                  bin/adminconsole lint:container --env test
                  bin/websiteconsole lint:container --env test
                  bin/adminconsole lint:container --env stage
                  bin/websiteconsole lint:container --env stage
                  bin/adminconsole lint:container --env prod
                  bin/websiteconsole lint:container --env prod
              env: ${{ matrix.env }}

            - name: Run tests
              run: time bin/runtests -i -a
              env: ${{ matrix.env }}
