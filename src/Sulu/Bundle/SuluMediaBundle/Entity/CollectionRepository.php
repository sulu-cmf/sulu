<?php
/*
 * This file is part of the Sulu CMS.
 *
 * (c) MASSIVE ART WebServices GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Sulu\Bundle\MediaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;

/**
 * CollectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectionRepository extends EntityRepository implements CollectionRepositoryInterface
{

    /**
     * {@inheritdoc}
     */
    public function findCollectionById($id, $asArray = false)
    {
        try {
            $qb = $this->createQueryBuilder('collection')
                ->leftJoin('collection.meta', 'collectionMeta')
                ->leftJoin('collection.type', 'type')
                ->leftJoin('collection.parent', 'parent')
                ->leftJoin('collection.children', 'children')
                ->leftJoin('children.media', 'childrenMedia')
                ->leftJoin('collection.media', 'media')

                /* TODO TestUser has no Contact!
                ->leftJoin('collection.creator', 'creator')
                ->leftJoin('creator.contact', 'creatorContact')
                ->leftJoin('collection.changer', 'changer')
                ->leftJoin('changer.contact', 'changerContact')
                */

                ->addSelect('collection')
                ->addSelect('collectionMeta')
                ->addSelect('type')
                ->addSelect('parent')
                ->addSelect('children')
                ->addSelect('childrenMedia')

                /* TODO TestUser has no Contact!
                ->addSelect('creator')
                ->addSelect('changer')
                ->addSelect('creatorContact')
                ->addSelect('changerContact')
                */
                ->addSelect('media')
                ->where('collection.id = :collectionId');

            $query = $qb->getQuery();
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
            $query->setParameter('collectionId', $id);

            if ($asArray) {
                if (isset($query->getArrayResult()[0])) {
                    return $query->getArrayResult()[0];
                } else {
                    return null;
                }
            } else {
                return $query->getSingleResult();
            }
        } catch (NoResultException $ex) {
            return null;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function findCollections($parent = null, $depth = null)
    {
        try {
            $qb = $this->createQueryBuilder('collection')
                ->leftJoin('collection.meta', 'collectionMeta')
                ->leftJoin('collection.type', 'type')
                ->leftJoin('collection.parent', 'parent')
                ->leftJoin('collection.children', 'children')
                ->leftJoin('children.media', 'childrenMedia')
                ->leftJoin('collection.media', 'media')
                /*
                ->leftJoin('collection.creator', 'creator')
                ->leftJoin('creator.contact', 'creatorContact')
                ->leftJoin('collection.changer', 'changer')
                ->leftJoin('changer.contact', 'changerContact')
                */
                ->addSelect('collectionMeta')
                ->addSelect('type')
                ->addSelect('parent')
                ->addSelect('children')
                ->addSelect('childrenMedia')
                /*
                ->addSelect('creator')
                ->addSelect('changer')
                ->addSelect('creatorContact')
                ->addSelect('changerContact')
                */
                ->addSelect('media');

            if ($parent !== null) {
                $qb->where('parent.id = :parent');
            }
            if ($depth !== null) {
                $qb->where('collection.depth = :depth');
            }

            $query = $qb->getQuery();
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
            if ($parent !== null) {
                $query->setParameter('parent', $parent);
            }
            if ($depth !== null) {
                $query->setParameter('depth', $depth);
            }

            return $query->getResult();
        } catch (NoResultException $ex) {
            return null;
        }
    }
}
