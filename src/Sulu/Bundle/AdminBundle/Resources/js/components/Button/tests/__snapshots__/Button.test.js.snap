// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should render the button with icon 1`] = `
<div>
  <button
    class="button secondary hasText"
    type="button"
  >
    <span
      aria-label="su-plus"
      class="su-plus buttonIcon"
    />
    <span
      class="buttonText"
    >
      Add something
    </span>
  </button>
</div>
`;

exports[`Should render with skin icon 1`] = `
<div>
  <button
    class="button icon"
    type="button"
  />
</div>
`;

exports[`Should render with skin icon and active 1`] = `
<div>
  <button
    class="button icon active"
    type="button"
  />
</div>
`;

exports[`Should render with skin icon and dropdown icon 1`] = `
<div>
  <button
    class="button icon"
    type="button"
  >
    <span
      aria-label="su-angle-down"
      class="su-angle-down dropdownIcon"
    />
  </button>
</div>
`;

exports[`Should render with skin icon and text 1`] = `
<div>
  <button
    class="button icon hasText"
    type="button"
  >
    <span
      class="buttonText"
    >
      Icon Text
    </span>
  </button>
</div>
`;

exports[`Should render with skin link 1`] = `
<div>
  <button
    class="button link"
    type="button"
  />
</div>
`;

exports[`Should render with skin link and dropdown icon 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <button
        class="button link"
        type="button"
      >
        <span
          aria-label="su-angle-down"
          class="su-angle-down dropdownIcon"
        />
      </button>
    </div>
  </body>,
  "container": <div>
    <button
      class="button link"
      type="button"
    >
      <span
        aria-label="su-angle-down"
        class="su-angle-down dropdownIcon"
      />
    </button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Should render with skin primary 1`] = `
<div>
  <button
    class="button primary"
    type="button"
  />
</div>
`;

exports[`Should render with skin primary and dropdown icon 1`] = `
<div>
  <button
    class="button primary"
    type="button"
  >
    <span
      aria-label="su-angle-down"
      class="su-angle-down dropdownIcon"
    />
  </button>
</div>
`;

exports[`Should render with skin secondary 1`] = `
<div>
  <button
    class="button secondary"
    type="button"
  />
</div>
`;

exports[`Should render with skin secondary and dropdown icon 1`] = `
<div>
  <button
    class="button secondary"
    type="button"
  >
    <span
      aria-label="su-angle-down"
      class="su-angle-down dropdownIcon"
    />
  </button>
</div>
`;

exports[`Should render with skin text 1`] = `
<div>
  <button
    class="button text"
    type="button"
  />
</div>
`;

exports[`should render disabled with skin secondary 1`] = `
<div>
  <button
    class="button secondary"
    disabled=""
    type="button"
  />
</div>
`;
