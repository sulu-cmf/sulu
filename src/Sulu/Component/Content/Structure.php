<?php
/*
 * This file is part of the Sulu CMS.
 *
 * (c) MASSIVE ART WebServices GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Sulu\Component\Content;

use DateTime;
use Symfony\Component\PropertyAccess\Exception\NoSuchPropertyException;

/**
 * Structure generated from Structure Manager to map a template.
 * This class is a blueprint of Subclasses generated by StructureManager. This sub classes will be cached in Symfony Cache
 */
abstract class Structure implements StructureInterface
{
    /**
     * webspaceKey of node
     * @var string
     */
    private $webspaceKey;

    /**
     * languageCode of node
     * @var string
     */
    private $languageCode;

    /**
     * unique key of template
     * @var string
     */
    private $key;

    /**
     * template to render content
     * @var string
     */
    private $view;

    /**
     * controller to render content
     * @var string
     */
    private $controller;

    /**
     * time to cache content
     * @var int
     */
    private $cacheLifeTime;

    /**
     * array of properties
     * @var array
     */
    private $properties = array();

    /**
     * has structure sub structures
     * @var bool
     */
    private $hasChildren = false;

    /**
     * children of node
     * @var StructureInterface[]
     */
    private $children = null;

    /**
     * uuid of node in CR
     * @var string
     */
    private $uuid;

    /**
     * user id of creator
     * @var int
     */
    private $creator;

    /**
     * user id of changer
     * @var int
     */
    private $changer;

    /**
     * datetime of creation
     * @var DateTime
     */
    private $created;

    /**
     * datetime of last changed
     * @var DateTime
     */
    private $changed;

    /**
     * state of node
     * @var int
     */
    private $nodeState;

    /**
     * global state of node (with inheritance)
     * @var int
     */
    private $globalState;

    /**
     * first published
     * @var DateTime
     */
    private $published;

    /**
     * should be shown in navigation or not
     * @var boolean
     */
    private $navigation;

    /**
     * structure translation is valid
     * @var boolean
     */
    private $hasTranslation;

    /**
     * @var StructureType
     */
    private $type;

    /**
     * @param $key string
     * @param $view string
     * @param $controller string
     * @param int $cacheLifeTime
     * @return \Sulu\Component\Content\Structure
     */
    public function __construct($key, $view, $controller, $cacheLifeTime = 604800)
    {
        $this->key = $key;
        $this->view = $view;
        $this->controller = $controller;
        $this->cacheLifeTime = $cacheLifeTime;

        // default state is test
        $this->nodeState = StructureInterface::STATE_TEST;
        $this->published = null;
        // default hide in navigation
        $this->navigation = false;
    }

    /**
     * adds a property to structure
     * @param PropertyInterface $property
     */
    protected function add(PropertyInterface $property)
    {
        $this->properties[$property->getName()] = $property;
    }

    /**
     * @param string $language
     */
    public function setLanguageCode($language)
    {
        $this->languageCode = $language;
    }

    /**
     * returns language of node
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->languageCode;
    }

    /**
     * @param string $webspace
     */
    public function setWebspaceKey($webspace)
    {
        $this->webspaceKey = $webspace;
    }

    /**
     * returns webspace of node
     * @return string
     */
    public function getWebspaceKey()
    {
        return $this->webspaceKey;
    }

    /**
     * key of template definition
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * twig template of template definition
     * @return string
     */
    public function getView()
    {
        return $this->view;
    }

    /**
     * controller which renders the template definition
     * @return string
     */
    public function getController()
    {
        return $this->controller;
    }

    /**
     * cacheLifeTime of template definition
     * @return int
     */
    public function getCacheLifeTime()
    {
        return $this->cacheLifeTime;
    }

    /**
     * returns uuid of node
     * @return string
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * sets uuid of node
     * @param $uuid
     */
    public function setUuid($uuid)
    {
        $this->uuid = $uuid;
    }

    /**
     * returns id of creator
     * @return int
     */
    public function getCreator()
    {
        return $this->creator;
    }

    /**
     * sets user id of creator
     * @param $userId int id of creator
     */
    public function setCreator($userId)
    {
        $this->creator = $userId;
    }

    /**
     * returns user id of changer
     * @return int
     */
    public function getChanger()
    {
        return $this->changer;
    }

    /**
     * sets user id of changer
     * @param $userId int id of changer
     */
    public function setChanger($userId)
    {
        $this->changer = $userId;
    }

    /**
     * return created datetime
     * @return DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * sets created datetime
     * @param DateTime $created
     * @return \DateTime
     */
    public function setCreated(DateTime $created)
    {
        return $this->created = $created;
    }

    /**
     * returns changed DateTime
     * @return DateTime
     */
    public function getChanged()
    {
        return $this->changed;
    }

    /**
     * sets changed datetime
     * @param \DateTime $changed
     */
    public function setChanged(DateTime $changed)
    {
        $this->changed = $changed;
    }

    /**
     * returns a property instance with given name
     * @param $name string name of property
     * @return PropertyInterface
     * @throws NoSuchPropertyException
     */
    public function getProperty($name)
    {
        if ($this->hasProperty($name)) {
            return $this->properties[$name];
        } else {
            throw new NoSuchPropertyException();
        }
    }

    /**
     * return value of property with given name
     * @param $name string name of property
     * @return mixed
     */
    public function getPropertyValue($name)
    {
        return $this->getProperty($name)->getValue();
    }

    /**
     * checks if a property exists
     * @param string $name
     * @return boolean
     */
    public function hasProperty($name)
    {
        return isset($this->properties[$name]);
    }

    /**
     * @param boolean $hasChildren
     */
    public function setHasChildren($hasChildren)
    {
        $this->hasChildren = $hasChildren;
    }

    /**
     * @return boolean
     */
    public function getHasChildren()
    {
        return $this->hasChildren;
    }

    /**
     * @param StructureInterface[] $children
     */
    public function setChildren($children)
    {
        $this->children = $children;
    }

    /**
     * @return null|StructureInterface[]
     */
    public function getChildren()
    {
        return $this->children;
    }

    /**
     * @param int $state
     * @return int
     */
    public function setNodeState($state)
    {
        $this->nodeState = $state;
    }

    /**
     * returns state of node
     * @return int
     */
    public function getNodeState()
    {
        return $this->nodeState;
    }

    /**
     * returns true if state of site is "published"
     * @return boolean
     */
    public function getPublishedState()
    {
        return ($this->nodeState === StructureInterface::STATE_PUBLISHED);
    }

    /**
     * sets the global state of node (with inheritance)
     * @param int $globalState
     */
    public function setGlobalState($globalState)
    {
        $this->globalState = $globalState;
    }

    /**
     * returns global state of node (with inheritance)
     * @return int
     */
    public function getGlobalState()
    {
        return $this->globalState;
    }

    /**
     * @param \DateTime $published
     */
    public function setPublished($published)
    {
        $this->published = $published;
    }

    /**
     * returns first published date
     * @return \DateTime
     */
    public function getPublished()
    {
        return $this->published;
    }

    /**
     * returns true if this node is shown in navigation
     * @return boolean
     */
    public function getNavigation()
    {
        return $this->navigation;
    }

    /**
     * @param boolean $showInNavigation
     */
    public function setNavigation($showInNavigation)
    {
        $this->navigation = $showInNavigation;
    }

    /**
     * @param boolean $hasTranslation
     */
    public function setHasTranslation($hasTranslation)
    {
        $this->hasTranslation = $hasTranslation;
    }

    /**
     * return true if structure translation is valid
     * @return boolean
     */
    public function getHasTranslation()
    {
        return $this->hasTranslation;
    }

    /**
     * returns an array of properties
     * @return array
     */
    public function getProperties()
    {
        return $this->properties;
    }

    /**
     * returns all property names
     * @return array
     */
    public function getPropertyNames()
    {
        return array_keys($this->properties);
    }

    /**
     * @param \Sulu\Component\Content\StructureType $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }

    /**
     * @return \Sulu\Component\Content\StructureType
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * magic getter
     * @param $property string name of property
     * @return mixed
     * @throws NoSuchPropertyException
     */
    public function __get($property)
    {
        if (method_exists($this, 'get' . ucfirst($property))) {
            return $this->{'get' . ucfirst($property)}();
        } else {
            return $this->getProperty($property)->getValue();
        }
    }

    /**
     * magic setter
     * @param $property string name of property
     * @param $value mixed value
     * @return mixed
     * @throws NoSuchPropertyException
     */
    public function __set($property, $value)
    {
        if (isset($this->properties[$property])) {
            return $this->getProperty($property)->setValue($value);
        } else {
            throw new NoSuchPropertyException();
        }
    }

    /**
     * magic isset
     * @param $property
     * @return bool
     */
    public function __isset($property)
    {
        if (isset($this->properties[$property])) {
            return true;
        } else {
            return isset($this->$property);
        }
    }

    /**
     * returns an array of property value pairs
     * @param bool $complete True if result should be representation of full node
     * @return array
     */
    public function toArray($complete = true)
    {
        if ($complete) {
            $result = array(
                'id' => $this->uuid,
                'nodeState' => $this->getNodeState(),
                'published' => $this->getPublished(),
                'globalState' => $this->getGlobalState(),
                'publishedState' => $this->getPublishedState(),
                'navigation' => $this->getNavigation(),
                'template' => $this->getKey(),
                'hasSub' => $this->hasChildren,
                'creator' => $this->creator,
                'changer' => $this->changer,
                'created' => $this->created,
                'changed' => $this->changed
            );

            if ($this->type !== null) {
                $result['type'] = $this->getType()->toArray();
            }

            /** @var PropertyInterface $property */
            foreach ($this->getProperties() as $property) {
                $result[$property->getName()] = $property->getValue();
            }

            return $result;
        } else {
            $result = array(
                'id' => $this->uuid,
                'nodeState' => $this->getNodeState(),
                'globalState' => $this->getGlobalState(),
                'publishedState' => $this->getPublishedState(),
                'navigation' => $this->getNavigation(),
                'hasSub' => $this->hasChildren,
                'title' => $this->getPropertyValue('title')
            );
            if ($this->type !== null) {
                $result['type'] = $this->getType()->toArray();
            }
            return $result;
        }
    }

    /**
     * (PHP 5 &gt;= 5.4.0)<br/>
     * Specify data which should be serialized to JSON
     * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed data which can be serialized by <b>json_encode</b>,
     * which is a value of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return $this->toArray();
    }

}
